{
  "problemId": "p14",
  "title": "Longest Substring with Same Letters After Replacement",
  "description": "Given a string s and an integer k, you can choose at most k characters of the string and replace them with any other uppercase English letter. Find the length of the longest substring containing the same letter you can get after performing the above operations.",
  "aim": "The goal is to understand how to use sliding window with character frequency counting to find the optimal substring after replacements.",
  "moduleId": "slidingWindow",
  "submoduleId": "sw_advanced",
  "difficulty": "Medium",
  "tags": ["String", "Sliding Window", "Character Frequency", "Hash Map"],
  "examples": [
    {
      "input": "s = \"ABAB\", k = 1",
      "output": "3",
      "explanation": "Replace the one 'A' in the middle with 'B' and form \"AABB\" or \"ABBB\". The longest substring is \"AAA\" or \"BBB\" with length 3."
    },
    {
      "input": "s = \"AABABBA\", k = 1",
      "output": "4",
      "explanation": "Replace one 'A' with 'B' to get \"AABBBBA\". The longest substring is \"BBBB\" with length 4."
    }
  ],
  "playground": {
    "initialState": {
      "stringElements": [
        {"value": "A", "state": "not_yet_reached", "index": 0},
        {"value": "A", "state": "not_yet_reached", "index": 1},
        {"value": "B", "state": "not_yet_reached", "index": 2},
        {"value": "A", "state": "not_yet_reached", "index": 3},
        {"value": "B", "state": "not_yet_reached", "index": 4},
        {"value": "B", "state": "not_yet_reached", "index": 5},
        {"value": "A", "state": "not_yet_reached", "index": 6}
      ],
      "k": 1,
      "windowStart": 0,
      "windowEnd": 0,
      "charFrequency": {},
      "maxRepeatLetterCount": 0,
      "maxLength": 0,
      "currentLength": 0
    },
    "steps": [
      {
        "stepId": 1,
        "description": "Initialize variables. Set windowStart = 0, maxLength = 0, charFrequency = {}, maxRepeatLetterCount = 0",
        "expectedAction": "click_initialize",
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "not_yet_reached", "index": 0},
            {"value": "A", "state": "not_yet_reached", "index": 1},
            {"value": "B", "state": "not_yet_reached", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "B", "state": "not_yet_reached", "index": 4},
            {"value": "B", "state": "not_yet_reached", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 0,
          "charFrequency": {},
          "maxRepeatLetterCount": 0,
          "maxLength": 0,
          "currentLength": 0,
          "highlightedElements": []
        },
        "jarvisMessage": "Welcome! Let's solve this advanced sliding window problem. We need to find the longest substring with the same letter after at most k replacements. Start by initializing our variables.",
        "codeHint": "// Initialize variables\nlet windowStart = 0;\nlet maxLength = 0;\nlet charFrequency = {};\nlet maxRepeatLetterCount = 0;",
        "codeBotMessage": "Hey! I'm CodeBot. We're setting up our sliding window algorithm. The key insight is that we need to track character frequencies and find the most frequent character in our current window.",
        "codeSnippet": "let windowStart = 0;           // Start of current window\nlet maxLength = 0;             // Longest valid substring found\nlet charFrequency = {};        // Character frequency map\nlet maxRepeatLetterCount = 0;  // Most frequent character count"
      },
      {
        "stepId": 2,
        "description": "Expand window to include first character 'A'. Update charFrequency['A'] = 1, maxRepeatLetterCount = 1",
        "expectedAction": "expand_window",
        "expectedElementIndex": 0,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "in_window", "index": 0},
            {"value": "A", "state": "not_yet_reached", "index": 1},
            {"value": "B", "state": "not_yet_reached", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "B", "state": "not_yet_reached", "index": 4},
            {"value": "B", "state": "not_yet_reached", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 0,
          "charFrequency": {"A": 1},
          "maxRepeatLetterCount": 1,
          "maxLength": 0,
          "currentLength": 1,
          "highlightedElements": [0]
        },
        "jarvisMessage": "Great! We've added the first 'A' to our window. Now charFrequency['A'] = 1 and maxRepeatLetterCount = 1. Our current window is \"A\" with length 1.",
        "codeHint": "// Add current character to frequency map\ncharFrequency[s[windowEnd]] = (charFrequency[s[windowEnd]] || 0) + 1;\nmaxRepeatLetterCount = Math.max(maxRepeatLetterCount, charFrequency[s[windowEnd]]);"
      },
      {
        "stepId": 3,
        "description": "Expand window to include second character 'A'. Update charFrequency['A'] = 2, maxRepeatLetterCount = 2",
        "expectedAction": "expand_window",
        "expectedElementIndex": 1,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "in_window", "index": 0},
            {"value": "A", "state": "in_window", "index": 1},
            {"value": "B", "state": "not_yet_reached", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "B", "state": "not_yet_reached", "index": 4},
            {"value": "B", "state": "not_yet_reached", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 1,
          "charFrequency": {"A": 2},
          "maxRepeatLetterCount": 2,
          "maxLength": 0,
          "currentLength": 2,
          "highlightedElements": [0, 1]
        },
        "jarvisMessage": "Excellent! Now we have \"AA\" in our window. charFrequency['A'] = 2 and maxRepeatLetterCount = 2. Our window length is 2.",
        "codeHint": "// Move window end pointer and update frequencies\nwindowEnd++;\ncharFrequency[s[windowEnd]] = (charFrequency[s[windowEnd]] || 0) + 1;\nmaxRepeatLetterCount = Math.max(maxRepeatLetterCount, charFrequency[s[windowEnd]]);"
      },
      {
        "stepId": 4,
        "description": "Expand window to include 'B'. Update charFrequency['B'] = 1. Check if window is valid: 3 - 2 = 1 <= k (valid)",
        "expectedAction": "expand_window",
        "expectedElementIndex": 2,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "in_window", "index": 0},
            {"value": "A", "state": "in_window", "index": 1},
            {"value": "B", "state": "in_window", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "B", "state": "not_yet_reached", "index": 4},
            {"value": "B", "state": "not_yet_reached", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 2,
          "charFrequency": {"A": 2, "B": 1},
          "maxRepeatLetterCount": 2,
          "maxLength": 0,
          "currentLength": 3,
          "highlightedElements": [0, 1, 2]
        },
        "jarvisMessage": "Perfect! Now we have \"AAB\" in our window. The key insight: to make all characters the same, we need to replace (windowLength - maxRepeatLetterCount) = 3 - 2 = 1 character. Since k = 1, this is valid!",
        "codeHint": "// Check if current window is valid\n// We need to replace (currentLength - maxRepeatLetterCount) characters\n// If this <= k, the window is valid"
      },
      {
        "stepId": 5,
        "description": "Update maxLength = 3 since current window is valid. Expand window to include next 'A'. Update charFrequency['A'] = 3, maxRepeatLetterCount = 3",
        "expectedAction": "expand_window",
        "expectedElementIndex": 3,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "in_window", "index": 0},
            {"value": "A", "state": "in_window", "index": 1},
            {"value": "B", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "not_yet_reached", "index": 4},
            {"value": "B", "state": "not_yet_reached", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 3,
          "charFrequency": {"A": 3, "B": 1},
          "maxRepeatLetterCount": 3,
          "maxLength": 3,
          "currentLength": 4,
          "highlightedElements": [0, 1, 2, 3]
        },
        "jarvisMessage": "Great! Now we have \"AABA\" with length 4. charFrequency['A'] = 3, maxRepeatLetterCount = 3. We need to replace 4 - 3 = 1 character, which is <= k = 1. This is valid!",
        "codeHint": "// Update maxLength if current window is valid\nmaxLength = Math.max(maxLength, currentLength);\n// Continue expanding if possible"
      },
      {
        "stepId": 6,
        "description": "Expand window to include 'B'. Update charFrequency['B'] = 2. Check validity: 5 - 3 = 2 > k (invalid). Contract window from left.",
        "expectedAction": "contract_window",
        "expectedElementIndex": 0,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "A", "state": "in_window", "index": 1},
            {"value": "B", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "in_window", "index": 4},
            {"value": "B", "state": "not_yet_reached", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 1,
          "windowEnd": 4,
          "charFrequency": {"A": 2, "B": 2},
          "maxRepeatLetterCount": 2,
          "currentLength": 4,
          "highlightedElements": [1, 2, 3, 4]
        },
        "jarvisMessage": "Ah! When we added 'B', our window became \"AABAB\" with length 5. We need to replace 5 - 3 = 2 characters, but k = 1. So we contract from the left, removing the first 'A'.",
        "codeHint": "// If window becomes invalid, contract from left\nwhile (currentLength - maxRepeatLetterCount > k) {\n  charFrequency[s[windowStart]]--;\n  windowStart++;\n  currentLength--;\n}"
      },
      {
        "stepId": 7,
        "description": "Continue expanding. Add next 'B'. Update charFrequency['B'] = 3, maxRepeatLetterCount = 3. Check validity: 5 - 3 = 2 > k (invalid). Contract again.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 5,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "A", "state": "in_window", "index": 1},
            {"value": "B", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "in_window", "index": 4},
            {"value": "B", "state": "in_window", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 1,
          "windowEnd": 5,
          "charFrequency": {"A": 2, "B": 3},
          "maxRepeatLetterCount": 3,
          "currentLength": 5,
          "highlightedElements": [1, 2, 3, 4, 5]
        },
        "jarvisMessage": "Now we have \"AABAB\" with length 5. charFrequency['B'] = 3, maxRepeatLetterCount = 3. We need to replace 5 - 3 = 2 characters, which exceeds k = 1. We must contract.",
        "codeHint": "// The window is invalid, so we need to contract\n// Remove characters from the left until it becomes valid again"
      },
      {
        "stepId": 8,
        "description": "Contract window by removing leftmost 'A'. Update charFrequency['A'] = 1. Now window \"ABABB\" has length 4, needs 4 - 3 = 1 replacement (valid). Update maxLength = 4",
        "expectedAction": "contract_window",
        "expectedElementIndex": 1,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "A", "state": "out_of_window_past", "index": 1},
            {"value": "B", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "in_window", "index": 4},
            {"value": "B", "state": "in_window", "index": 5},
            {"value": "A", "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 2,
          "windowEnd": 5,
          "charFrequency": {"A": 1, "B": 3},
          "maxRepeatLetterCount": 3,
          "maxLength": 4,
          "currentLength": 4,
          "highlightedElements": [2, 3, 4, 5]
        },
        "jarvisMessage": "Perfect! After contracting, we have \"ABABB\" with length 4. We need to replace 4 - 3 = 1 character, which equals k = 1. This is valid! We update maxLength = 4.",
        "codeHint": "// After contracting, check if window is valid\n// If valid, update maxLength\nmaxLength = Math.max(maxLength, currentLength);"
      },
      {
        "stepId": 9,
        "description": "Add final character 'A'. Update charFrequency['A'] = 2. Check validity: 5 - 3 = 2 > k (invalid). Contract to make valid.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 6,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "A", "state": "out_of_window_past", "index": 1},
            {"value": "B", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "in_window", "index": 4},
            {"value": "B", "state": "in_window", "index": 5},
            {"value": "A", "state": "in_window", "index": 6}
          ],
          "windowStart": 2,
          "windowEnd": 6,
          "charFrequency": {"A": 2, "B": 3},
          "maxRepeatLetterCount": 3,
          "currentLength": 5,
          "highlightedElements": [2, 3, 4, 5, 6]
        },
        "jarvisMessage": "We've added the final 'A' to get \"ABABBA\" with length 5. We need to replace 5 - 3 = 2 characters, which exceeds k = 1. We must contract to make it valid.",
        "codeHint": "// Final expansion - check if we can add this character\n// If not, we'll need to contract to maintain validity"
      },
      {
        "stepId": 10,
        "description": "Contract window to make it valid. Remove leftmost 'B'. Now window \"ABBA\" has length 4, needs 4 - 3 = 1 replacement (valid). Final maxLength = 4",
        "expectedAction": "contract_window",
        "expectedElementIndex": 2,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "A", "state": "out_of_window_past", "index": 1},
            {"value": "B", "state": "out_of_window_past", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "in_window", "index": 4},
            {"value": "B", "state": "in_window", "index": 5},
            {"value": "A", "state": "in_window", "index": 6}
          ],
          "windowStart": 3,
          "windowEnd": 6,
          "charFrequency": {"A": 2, "B": 2},
          "maxRepeatLetterCount": 2,
          "maxLength": 4,
          "currentLength": 4,
          "highlightedElements": [3, 4, 5, 6]
        },
        "jarvisMessage": "Excellent! After contracting, we have \"ABBA\" with length 4. We need to replace 4 - 2 = 2 characters, but since k = 1, this is still invalid. We need to contract more.",
        "codeHint": "// Continue contracting until window is valid\n// We need (currentLength - maxRepeatLetterCount) <= k"
      },
      {
        "stepId": 11,
        "description": "Algorithm completed! The longest substring with same letters after at most 1 replacement is 4 characters.",
        "expectedAction": "complete_algorithm",
        "expectedElementIndex": 6,
        "uiState": {
          "stringElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "A", "state": "out_of_window_past", "index": 1},
            {"value": "B", "state": "out_of_window_past", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "B", "state": "in_window", "index": 4},
            {"value": "B", "state": "in_window", "index": 5},
            {"value": "A", "state": "in_window", "index": 6}
          ],
          "windowStart": 3,
          "windowEnd": 6,
          "charFrequency": {"A": 2, "B": 2},
          "maxRepeatLetterCount": 2,
          "maxLength": 4,
          "currentLength": 4,
          "highlightedElements": [3, 4, 5, 6]
        },
        "jarvisMessage": "🎉 Congratulations! You've successfully completed the advanced sliding window algorithm. The longest substring with same letters after at most 1 replacement is 4 characters.",
        "codeHint": "// Return the final result\nreturn maxLength; // Returns 4",
        "codeBotMessage": "Fantastic! You've mastered this advanced sliding window problem. The key insight was tracking character frequencies and ensuring that (windowLength - maxRepeatLetterCount) <= k. This gives us O(n) time complexity!",
        "codeSnippet": "// Algorithm completed!\n// Final result: maxLength = 4\n// Longest substring with same letters after 1 replacement\nreturn maxLength; // Returns 4"
      }
    ],
    "jarvisConfig": {
      "personality": "encouraging",
      "hintLevels": ["subtle", "helpful", "explicit"],
      "motivationalMessages": [
        "Great thinking! You're understanding the advanced sliding window concept.",
        "That's exactly right! You're seeing how character frequency tracking works.",
        "Excellent intuition! You're mastering the contraction logic.",
        "You've got this! Each step brings you closer to mastering advanced sliding window."
      ]
    }
  },
  "solution": {
    "bruteForce": {
      "idea": "Try all possible substrings and for each, calculate the minimum replacements needed to make all characters the same.",
      "timeComplexity": "O(n³)",
      "spaceComplexity": "O(1)",
      "walkthrough": [
        "Generate all possible substrings.",
        "For each substring, count character frequencies.",
        "Find the most frequent character and calculate replacements needed.",
        "If replacements <= k, update maxLength.",
        "Return maxLength."
      ]
    },
    "optimal": {
      "idea": "Use sliding window with character frequency tracking. Expand window until it becomes invalid, then contract to maintain validity.",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(1)",
      "walkthrough": [
        "Initialize windowStart = 0, maxLength = 0, charFrequency = {}, maxRepeatLetterCount = 0.",
        "Expand window by adding characters and updating frequency map.",
        "Track the most frequent character count in current window.",
        "If (windowLength - maxRepeatLetterCount) > k, contract window from left.",
        "Update maxLength when window is valid.",
        "Return maxLength after processing entire string."
      ]
    }
  },
  "code": {
    "javascript": "function characterReplacement(s, k) {\n    let windowStart = 0;\n    let maxLength = 0;\n    let charFrequency = {};\n    let maxRepeatLetterCount = 0;\n    \n    for (let windowEnd = 0; windowEnd < s.length; windowEnd++) {\n        // Add current character to frequency map\n        charFrequency[s[windowEnd]] = (charFrequency[s[windowEnd]] || 0) + 1;\n        \n        // Update max repeat letter count\n        maxRepeatLetterCount = Math.max(maxRepeatLetterCount, charFrequency[s[windowEnd]]);\n        \n        // Check if current window is valid\n        // We need to replace (currentLength - maxRepeatLetterCount) characters\n        if ((windowEnd - windowStart + 1) - maxRepeatLetterCount > k) {\n            // Window is invalid, contract from left\n            charFrequency[s[windowStart]]--;\n            windowStart++;\n        }\n        \n        // Update maxLength\n        maxLength = Math.max(maxLength, windowEnd - windowStart + 1);\n    }\n    \n    return maxLength;\n}"
  }
}
