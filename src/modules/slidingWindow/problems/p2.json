{
  "problemId": "p2",
  "title": "Maximum Points You Can Obtain from Cards",
  "description": "Given N cards arranged in a row, each card has an associated score denoted by the cardScore array. Choose exactly k cards. In each step, a card can be chosen either from the beginning or the end of the row. The score is the sum of the scores of the chosen cards. Return the maximum score that can be obtained.",
  "aim": "The goal is to understand how to maximize score by strategically choosing cards from either end of the array, which can be solved using a fixed-size approach where we consider all possible combinations of choosing k cards.",
  "moduleId": "slidingWindow",
  "submoduleId": "sw_fixed",
  "difficulty": "Medium",
  "tags": ["Array", "Sliding Window", "Fixed Size", "Two Pointers", "Greedy"],
  "examples": [
    {
      "input": "cardScore = [1, 2, 3, 4, 5, 6], k = 3",
      "output": "15",
      "explanation": "Choosing the rightmost cards will maximize your total score. So optimal cards chosen are the rightmost three cards 4, 5, 6. The score is 4 + 5 + 6 = 15."
    },
    {
      "input": "cardScore = [5, 4, 1, 8, 7, 1, 3], k = 3",
      "output": "12",
      "explanation": "In first step we will choose card from beginning with score of 5. In second step we will choose the card from beginning again with score of 4. In third step we will choose the card from end with score of 3. The total score is 5 + 4 + 3 = 12."
    },
    {
      "input": "cardScore = [9, 10, 1, 2, 3, 5], k = 5",
      "output": "29",
      "explanation": "Choose 9, 10 from beginning and 1, 2, 3 from end. Total score = 9 + 10 + 1 + 2 + 3 = 25. Or choose 9, 10, 1, 2, 5 = 27. Or choose 9, 10, 1, 3, 5 = 28. Or choose 9, 10, 2, 3, 5 = 29 (optimal)."
    }
  ],
  "playground": {
    "initialState": {
      "array": [5, 4, 1, 8, 7, 1, 3],
      "k": 3,
      "leftPointer": 0,
      "rightPointer": 6,
      "currentScore": 0,
      "maxScore": 0,
      "chosenCards": []
    },
    "steps": [
      {
        "stepId": 1,
        "description": "Initialize variables. Set leftPointer = 0, rightPointer = n-1, currentScore = 0, maxScore = 0",
        "expectedAction": "click_initialize",
        "uiState": {
          "arrayElements": [
            {"value": 5, "state": "not_yet_reached", "index": 0},
            {"value": 4, "state": "not_yet_reached", "index": 1},
            {"value": 1, "state": "not_yet_reached", "index": 2},
            {"value": 8, "state": "not_yet_reached", "index": 3},
            {"value": 7, "state": "not_yet_reached", "index": 4},
            {"value": 1, "state": "not_yet_reached", "index": 5},
            {"value": 3, "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": null,
          "windowEnd": null,
          "windowSum": 0,
          "maxSum": 0,
          "highlightedElements": []
        },
        "jarvisMessage": "Welcome! Let's solve the Maximum Points from Cards problem. We need to choose exactly 3 cards from either end of the array. Click 'Initialize' to set up our pointers and variables.",
        "codeHint": "// Initialize pointers and score variables\nlet leftPointer = 0;\nlet rightPointer = n - 1;\nlet currentScore = 0;\nlet maxScore = 0;",
        "codeBotMessage": "Hey there! I'm CodeBot. When you click Initialize, we set up our two pointers - one at the beginning (leftPointer = 0) and one at the end (rightPointer = 6) of the array. We'll use these to choose cards strategically!",
        "codeSnippet": "let leftPointer = 0;    // Start from left end\nlet rightPointer = 6;  // Start from right end\nlet currentScore = 0;  // Track current score\nlet maxScore = 0;      // Track maximum score found"
      },
      {
        "stepId": 2,
        "description": "Pick the better end: compare left (5) vs right (3). Choose the larger value.",
        "expectedAction": "add_element_to_window",
        "expectedElementIndex": 0,
        "hideIndexHint": true,
        "uiState": {
          "arrayElements": [
            {"value": 5, "state": "in_window", "index": 0},
            {"value": 4, "state": "not_yet_reached", "index": 1},
            {"value": 1, "state": "not_yet_reached", "index": 2},
            {"value": 8, "state": "not_yet_reached", "index": 3},
            {"value": 7, "state": "not_yet_reached", "index": 4},
            {"value": 1, "state": "not_yet_reached", "index": 5},
            {"value": 3, "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 0,
          "windowSum": 5,
          "maxSum": 0,
          "highlightedElements": [0]
        },
        "jarvisMessage": "Strategy: At each step, compare the leftmost and rightmost cards and take the larger one to maximize your score.",
        "codeHint": "// Greedy step: choose max end\nif (cardScore[leftPointer] >= cardScore[rightPointer]) { /* pick left */ } else { /* pick right */ }",
        "codeBotMessage": "Nice! Left (5) vs Right (3) â†’ pick 5 from the left end.",
        "codeSnippet": "// Compare ends\nif (cardScore[leftPointer] >= cardScore[rightPointer]) {\n  currentScore += cardScore[leftPointer];\n  leftPointer++;\n} else {\n  currentScore += cardScore[rightPointer];\n  rightPointer--;\n}"
      },
      {
        "stepId": 3,
        "description": "Again, pick the better end: compare left (4) vs right (3). Choose the larger value.",
        "expectedAction": "add_element_to_window",
        "expectedElementIndex": 1,
        "hideIndexHint": true,
        "uiState": {
          "arrayElements": [
            {"value": 5, "state": "in_window", "index": 0},
            {"value": 4, "state": "in_window", "index": 1},
            {"value": 1, "state": "not_yet_reached", "index": 2},
            {"value": 8, "state": "not_yet_reached", "index": 3},
            {"value": 7, "state": "not_yet_reached", "index": 4},
            {"value": 1, "state": "not_yet_reached", "index": 5},
            {"value": 3, "state": "not_yet_reached", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 1,
          "windowSum": 9,
          "maxSum": 0,
          "highlightedElements": [0, 1]
        },
        "jarvisMessage": "Keep applying the same idea: take the larger of the two ends to build a high score.",
        "codeHint": "// Compare ends and pick max again\nif (cardScore[leftPointer] >= cardScore[rightPointer]) { /* pick left */ } else { /* pick right */ }",
        "codeBotMessage": "Left (4) vs Right (3) â†’ pick 4 from the left end.",
        "codeSnippet": "// Compare ends again\nif (cardScore[leftPointer] >= cardScore[rightPointer]) {\n  currentScore += cardScore[leftPointer];\n  leftPointer++;\n} else {\n  currentScore += cardScore[rightPointer];\n  rightPointer--;\n}"
      },
      {
        "stepId": 4,
        "description": "Finally, compare left (1) vs right (3). Choose the larger value to complete k picks.",
        "expectedAction": "complete_first_window",
        "expectedElementIndex": 6,
        "hideIndexHint": true,
        "uiState": {
          "arrayElements": [
            {"value": 5, "state": "in_window", "index": 0},
            {"value": 5, "state": "in_window", "index": 1},
            {"value": 1, "state": "not_yet_reached", "index": 2},
            {"value": 8, "state": "not_yet_reached", "index": 3},
            {"value": 7, "state": "not_yet_reached", "index": 4},
            {"value": 1, "state": "not_yet_reached", "index": 5},
            {"value": 3, "state": "in_window", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 6,
          "windowSum": 12,
          "maxSum": 12,
          "highlightedElements": [0, 1, 6]
        },
        "jarvisMessage": "One more comparison to finish. This compare-and-choose approach generalizes to larger k too.",
        "codeHint": "// Complete k picks by choosing the better end",
        "codeBotMessage": "Right (3) is larger than Left (1) â†’ pick 3 from the right.",
        "codeSnippet": "// Final pick for k\nif (cardScore[leftPointer] >= cardScore[rightPointer]) {\n  currentScore += cardScore[leftPointer];\n  leftPointer++;\n} else {\n  currentScore += cardScore[rightPointer];\n  rightPointer--;\n}\nmaxScore = max(maxScore, currentScore);"
      },
      {
        "stepId": 5,
        "description": "Algorithm completed! Final maxScore = 12",
        "expectedAction": "complete_algorithm",
        "expectedElementIndex": 6,
        "uiState": {
          "arrayElements": [
            {"value": 5, "state": "in_window", "index": 0},
            {"value": 4, "state": "in_window", "index": 1},
            {"value": 1, "state": "not_yet_reached", "index": 2},
            {"value": 8, "state": "not_yet_reached", "index": 3},
            {"value": 7, "state": "not_yet_reached", "index": 4},
            {"value": 1, "state": "not_yet_reached", "index": 5},
            {"value": 3, "state": "in_window", "index": 6}
          ],
          "windowStart": 0,
          "windowEnd": 6,
          "windowSum": 12,
          "maxSum": 12,
          "highlightedElements": [0, 1, 6]
        },
        "jarvisMessage": "ðŸŽ‰ Congratulations! You've successfully completed the Maximum Points from Cards algorithm! The optimal solution is choosing cards [5, 4, 3] with a total score of 12. This demonstrates the key insight: sometimes choosing from both ends strategically gives the best result!",
        "codeHint": "// Algorithm completed successfully\nreturn maxScore; // Returns 12",
        "codeBotMessage": "Fantastic! You've mastered the Maximum Points from Cards problem! The key insight is that we need to consider all possible combinations of choosing k cards from either end. In this case, choosing 5, 4 from left and 3 from right gives us the optimal score of 12!",
        "codeSnippet": "// Algorithm completed!\n// Final result: maxScore = 12\n// Optimal cards chosen: [5, 4, 3]\nreturn maxScore; // Returns 12"
      }
    ],
    "jarvisConfig": {
      "personality": "encouraging",
      "hintLevels": ["subtle", "helpful", "explicit"],
      "motivationalMessages": [
        "Great thinking! You're understanding the strategic choice between left and right.",
        "That's exactly right! You're seeing the pattern of choosing from both ends.",
        "Excellent intuition! You're understanding the greedy approach to maximize score.",
        "You've got this! Each choice brings you closer to the optimal solution."
      ]
    }
  },
  "solution": {
    "bruteForce": {
      "idea": "Try all possible combinations of choosing k cards from either end of the array.",
      "timeComplexity": "O(2^k)",
      "spaceComplexity": "O(k)",
      "walkthrough": [
        "Generate all possible combinations of choosing k cards.",
        "For each combination, calculate the total score.",
        "Track the maximum score found.",
        "Return the maximum score."
      ]
    },
    "optimal": {
      "idea": "Use two pointers approach to consider choosing cards from either end, always picking the higher value card.",
      "timeComplexity": "O(k)",
      "spaceComplexity": "O(1)",
      "walkthrough": [
        "Initialize leftPointer = 0, rightPointer = n-1.",
        "For k iterations, compare cardScore[leftPointer] and cardScore[rightPointer].",
        "Choose the higher value card and move the corresponding pointer.",
        "Return the sum of chosen cards."
      ]
    }
  },
  "code": {
    "cpp": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maxScore(vector<int>& cardPoints, int k) {\n        int leftPointer = 0;\n        int rightPointer = cardPoints.size() - 1;\n        int currentScore = 0;\n        int maxScore = 0;\n        \n        for (int i = 0; i < k; i++) {\n            if (cardPoints[leftPointer] >= cardPoints[rightPointer]) {\n                currentScore += cardPoints[leftPointer];\n                leftPointer++;\n            } else {\n                currentScore += cardPoints[rightPointer];\n                rightPointer--;\n            }\n            maxScore = max(maxScore, currentScore);\n        }\n        \n        return maxScore;\n    }\n};\n\nint main() {\n    Solution sol;\n    vector<int> cards1 = {1, 2, 3, 4, 5, 6};\n    vector<int> cards2 = {5, 4, 1, 8, 7, 1, 3};\n    cout << sol.maxScore(cards1, 3) << endl;  // Output: 15\n    cout << sol.maxScore(cards2, 3) << endl;  // Output: 12\n    return 0;\n}"
  }
}