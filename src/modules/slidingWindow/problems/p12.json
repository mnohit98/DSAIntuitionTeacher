{
  "problemId": "p12",
  "title": "Binary Subarray With Sum",
  "description": "Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum equal to goal.",
  "aim": "Demonstrate prefix sum with hashmap approach; track running sum and count subarrays with sum equal to goal using (prefixSum - goal) lookup.",
  "moduleId": "slidingWindow",
  "submoduleId": "sw_prefix_sum",
  "difficulty": "Medium",
  "tags": ["Array", "Hash Map", "Prefix Sum", "Subarray Counting", "Binary Array", "Running Sum"],
  "examples": [
    { "input": "nums = [1, 1, 0, 1, 0, 0, 1], goal = 3", "output": "4", "explanation": "The subarrays with sum 3 are: [1, 1, 0, 1], [1, 1, 0, 1, 0], [1, 1, 0, 1, 0, 0], [1, 0, 1, 0, 0, 1]." },
    { "input": "nums = [0, 0, 0, 0, 1], goal = 0", "output": "10", "explanation": "Some of the subarrays with sum 0 are: [0], [0, 0], [0, 0, 0], [0, 0, 0, 0]." }
  ],
  "playground": {
    "initialState": {
      "array": [1, 1, 0, 1, 0, 0, 1],
      "goal": 3,
      "prefixSum": 0,
      "count": 0,
      "prefixCount": {},
      "currentIndex": 0
    },
    "steps": [
      {
        "stepId": 1,
        "description": "Initialize variables. We'll track the running prefix sum and use a hashmap to count how many times each prefix sum appears.",
        "expectedAction": "click_initialize",
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "not_yet_reached", "index": 0},
            {"value": 1, "state": "not_yet_reached", "index": 1},
            {"value": 0, "state": "not_yet_reached", "index": 2},
            {"value": 1, "state": "not_yet_reached", "index": 3},
            {"value": 0, "state": "not_yet_reached", "index": 4},
            {"value": 0, "state": "not_yet_reached", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 0,
          "count": 0,
          "prefixCount": {"0": 1},
          "currentIndex": 0,
          "highlightedElements": [],
          "goal": 3
        },
        "jarvisMessage": "Welcome! We'll use a prefix sum approach with a hashmap to find all subarrays with sum equal to goal=3. We'll track the running sum and count valid subarrays.",
        "codeHint": "// Initialize\nlet prefixSum = 0;\nlet count = 0;\nlet prefixCount = {0: 1}; // base case",
        "codeBotMessage": "We'll track the running prefix sum and use a hashmap to count how many times each prefix sum appears. This allows us to find subarrays with sum = goal efficiently.",
        "codeSnippet": "let prefixSum = 0;\nlet count = 0;\nlet prefixCount = {0: 1};"
      },
      {
        "stepId": 2,
        "description": "Process index 0: nums[0]=1. prefixSum=1. Need prefixSum-goal=1-3=-2. Not found in hashmap. Add prefixSum=1 to hashmap.",
        "expectedAction": "process_element",
        "expectedElementIndex": 0,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "not_yet_reached", "index": 1},
            {"value": 0, "state": "not_yet_reached", "index": 2},
            {"value": 1, "state": "not_yet_reached", "index": 3},
            {"value": 0, "state": "not_yet_reached", "index": 4},
            {"value": 0, "state": "not_yet_reached", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 1,
          "count": 0,
          "prefixCount": {"0": 1, "1": 1},
          "currentIndex": 0,
          "highlightedElements": [0],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[0]=1. prefixSum=1. We need to find a previous prefix sum equal to (1-3)=-2. Since -2 is not in our hashmap, no valid subarray ends here. Add prefixSum=1 to hashmap.",
        "codeHint": "// Process current element\nprefixSum += nums[i];\nif (prefixCount[prefixSum - goal]) count += prefixCount[prefixSum - goal];\nprefixCount[prefixSum]++;",
        "codeBotMessage": "prefixSum = 1. We need prefixSum - goal = 1 - 3 = -2. Since -2 is not in our hashmap, count stays 0. We add prefixSum=1 to our hashmap.",
        "codeSnippet": "// prefixSum = 1; need = -2; not found; count = 0; prefixCount = {0:1, 1:1};"
      },
      {
        "stepId": 3,
        "description": "Process index 1: nums[1]=1. prefixSum=2. Need prefixSum-goal=2-3=-1. Not found in hashmap. Add prefixSum=2 to hashmap.",
        "expectedAction": "process_element",
        "expectedElementIndex": 1,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "not_yet_reached", "index": 2},
            {"value": 1, "state": "not_yet_reached", "index": 3},
            {"value": 0, "state": "not_yet_reached", "index": 4},
            {"value": 0, "state": "not_yet_reached", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 2,
          "count": 0,
          "prefixCount": {"0": 1, "1": 1, "2": 1},
          "currentIndex": 1,
          "highlightedElements": [0, 1],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[1]=1. prefixSum=2. We need to find a previous prefix sum equal to (2-3)=-1. Since -1 is not in our hashmap, no valid subarray ends here. Add prefixSum=2 to hashmap.",
        "codeHint": "// Process current element",
        "codeBotMessage": "prefixSum = 2. We need prefixSum - goal = 2 - 3 = -1. Since -1 is not in our hashmap, count stays 0. We add prefixSum=2 to our hashmap.",
        "codeSnippet": "// prefixSum = 2; need = -1; not found; count = 0; prefixCount = {0:1, 1:1, 2:1};"
      },
      {
        "stepId": 4,
        "description": "Process index 2: nums[2]=0. prefixSum=2. Need prefixSum-goal=2-3=-1. Not found in hashmap. Add prefixSum=2 to hashmap (increment count).",
        "expectedAction": "process_element",
        "expectedElementIndex": 2,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "processed", "index": 2},
            {"value": 1, "state": "not_yet_reached", "index": 3},
            {"value": 0, "state": "not_yet_reached", "index": 4},
            {"value": 0, "state": "not_yet_reached", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 2,
          "count": 0,
          "prefixCount": {"0": 1, "1": 1, "2": 2},
          "currentIndex": 2,
          "highlightedElements": [0, 1, 2],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[2]=0. prefixSum=2 (unchanged). We need to find a previous prefix sum equal to (2-3)=-1. Since -1 is not in our hashmap, no valid subarray ends here. Increment count for prefixSum=2 in hashmap.",
        "codeHint": "// Process current element",
        "codeBotMessage": "prefixSum = 2. We need prefixSum - goal = 2 - 3 = -1. Since -1 is not in our hashmap, count stays 0. We increment the count for prefixSum=2 in our hashmap.",
        "codeSnippet": "// prefixSum = 2; need = -1; not found; count = 0; prefixCount = {0:1, 1:1, 2:2};"
      },
      {
        "stepId": 5,
        "description": "Process index 3: nums[3]=1. prefixSum=3. Need prefixSum-goal=3-3=0. Found in hashmap! count += prefixCount[0] = 1. Add prefixSum=3 to hashmap.",
        "expectedAction": "process_element",
        "expectedElementIndex": 3,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "processed", "index": 2},
            {"value": 1, "state": "processed", "index": 3},
            {"value": 0, "state": "not_yet_reached", "index": 4},
            {"value": 0, "state": "not_yet_reached", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 3,
          "count": 1,
          "prefixCount": {"0": 1, "1": 1, "2": 2, "3": 1},
          "currentIndex": 3,
          "highlightedElements": [0, 1, 2, 3],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[3]=1. prefixSum=3. We need to find a previous prefix sum equal to (3-3)=0. Found! prefixCount[0]=1, so count += 1. We found 1 valid subarray ending at index 3.",
        "codeHint": "// Found valid subarray\nif (prefixCount[prefixSum - goal]) {\n  count += prefixCount[prefixSum - goal];\n}",
        "codeBotMessage": "prefixSum = 3. We need prefixSum - goal = 3 - 3 = 0. Found prefixCount[0] = 1! This means there's 1 subarray ending at index 3 with sum = goal. count = 1.",
        "codeSnippet": "// prefixSum = 3; need = 0; found = 1; count = 1; prefixCount = {0:1, 1:1, 2:2, 3:1};"
      },
      {
        "stepId": 6,
        "description": "Process index 4: nums[4]=0. prefixSum=3. Need prefixSum-goal=3-3=0. Found in hashmap! count += prefixCount[0] = 1. Increment count for prefixSum=3 in hashmap.",
        "expectedAction": "process_element",
        "expectedElementIndex": 4,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "processed", "index": 2},
            {"value": 1, "state": "processed", "index": 3},
            {"value": 0, "state": "processed", "index": 4},
            {"value": 0, "state": "not_yet_reached", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 3,
          "count": 2,
          "prefixCount": {"0": 1, "1": 1, "2": 2, "3": 2},
          "currentIndex": 4,
          "highlightedElements": [0, 1, 2, 3, 4],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[4]=0. prefixSum=3 (unchanged). We need to find a previous prefix sum equal to (3-3)=0. Found! prefixCount[0]=1, so count += 1. We found another valid subarray ending at index 4.",
        "codeHint": "// Found another valid subarray",
        "codeBotMessage": "prefixSum = 3. We need prefixSum - goal = 3 - 3 = 0. Found prefixCount[0] = 1! This means there's another subarray ending at index 4 with sum = goal. count = 2.",
        "codeSnippet": "// prefixSum = 3; need = 0; found = 1; count = 2; prefixCount = {0:1, 1:1, 2:2, 3:2};"
      },
      {
        "stepId": 7,
        "description": "Process index 5: nums[5]=0. prefixSum=3. Need prefixSum-goal=3-3=0. Found in hashmap! count += prefixCount[0] = 1. Increment count for prefixSum=3 in hashmap.",
        "expectedAction": "process_element",
        "expectedElementIndex": 5,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "processed", "index": 2},
            {"value": 1, "state": "processed", "index": 3},
            {"value": 0, "state": "processed", "index": 4},
            {"value": 0, "state": "processed", "index": 5},
            {"value": 1, "state": "not_yet_reached", "index": 6}
          ],
          "prefixSum": 3,
          "count": 3,
          "prefixCount": {"0": 1, "1": 1, "2": 2, "3": 3},
          "currentIndex": 5,
          "highlightedElements": [0, 1, 2, 3, 4, 5],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[5]=0. prefixSum=3 (unchanged). We need to find a previous prefix sum equal to (3-3)=0. Found! prefixCount[0]=1, so count += 1. We found another valid subarray ending at index 5.",
        "codeHint": "// Found another valid subarray",
        "codeBotMessage": "prefixSum = 3. We need prefixSum - goal = 3 - 3 = 0. Found prefixCount[0] = 1! This means there's another subarray ending at index 5 with sum = goal. count = 3.",
        "codeSnippet": "// prefixSum = 3; need = 0; found = 1; count = 3; prefixCount = {0:1, 1:1, 2:2, 3:3};"
      },
      {
        "stepId": 8,
        "description": "Process index 6: nums[6]=1. prefixSum=4. Need prefixSum-goal=4-3=1. Found in hashmap! count += prefixCount[1] = 1. Add prefixSum=4 to hashmap.",
        "expectedAction": "process_element",
        "expectedElementIndex": 6,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "processed", "index": 2},
            {"value": 1, "state": "processed", "index": 3},
            {"value": 0, "state": "processed", "index": 4},
            {"value": 0, "state": "processed", "index": 5},
            {"value": 1, "state": "processed", "index": 6}
          ],
          "prefixSum": 4,
          "count": 4,
          "prefixCount": {"0": 1, "1": 1, "2": 2, "3": 3, "4": 1},
          "currentIndex": 6,
          "highlightedElements": [0, 1, 2, 3, 4, 5, 6],
          "goal": 3
        },
        "jarvisMessage": "Processed nums[6]=1. prefixSum=4. We need to find a previous prefix sum equal to (4-3)=1. Found! prefixCount[1]=1, so count += 1. We found another valid subarray ending at index 6.",
        "codeHint": "// Found another valid subarray",
        "codeBotMessage": "prefixSum = 4. We need prefixSum - goal = 4 - 3 = 1. Found prefixCount[1] = 1! This means there's another subarray ending at index 6 with sum = goal. count = 4.",
        "codeSnippet": "// prefixSum = 4; need = 1; found = 1; count = 4; prefixCount = {0:1, 1:1, 2:2, 3:3, 4:1};"
      },
      {
        "stepId": 9,
        "description": "Algorithm completed! Total subarrays with sum = 3 is 4.",
        "expectedAction": "complete_algorithm",
        "expectedElementIndex": 6,
        "uiState": {
          "arrayElements": [
            {"value": 1, "state": "processed", "index": 0},
            {"value": 1, "state": "processed", "index": 1},
            {"value": 0, "state": "processed", "index": 2},
            {"value": 1, "state": "processed", "index": 3},
            {"value": 0, "state": "processed", "index": 4},
            {"value": 0, "state": "processed", "index": 5},
            {"value": 1, "state": "processed", "index": 6}
          ],
          "prefixSum": 4,
          "count": 4,
          "prefixCount": {"0": 1, "1": 1, "2": 2, "3": 3, "4": 1},
          "currentIndex": 6,
          "highlightedElements": [0, 1, 2, 3, 4, 5, 6],
          "goal": 3
        },
        "jarvisMessage": "🎉 Congratulations! You've completed the walkthrough. Total subarrays with sum = 3 is 4. The valid subarrays are: [1,1,0,1], [1,1,0,1,0], [1,1,0,1,0,0], [1,0,1,0,0,1].",
        "codeHint": "// Done\nreturn count;",
        "codeBotMessage": "Prefix sum + hashmap: O(n) time, O(n) space. We tracked running sums and used hashmap lookup to find subarrays with sum = goal efficiently.",
        "codeSnippet": "// Final answer\nreturn count;"
      }
    ],
    "jarvisConfig": {
      "personality": "encouraging",
      "hintLevels": ["subtle", "helpful", "explicit"],
      "motivationalMessages": [
        "Great thinking! The prefix sum approach allows us to find subarrays with any target sum efficiently.",
        "Exactly! The key insight is that if prefixSum[i] - prefixSum[j] = goal, then subarray [j+1...i] has sum = goal.",
        "You're mastering prefix sum problems with hashmap optimization!",
        "Awesome! This technique works for any subarray sum problems."
      ]
    }
  },
  "solution": {
    "optimal": {
      "idea": "Use prefix sum with hashmap; track running sum and count how many times each prefix sum appears to find subarrays with sum equal to goal using (prefixSum - goal) lookup.",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(n)",
      "walkthrough": [
        "Initialize prefixSum = 0, count = 0, prefixCount = {0: 1} (base case).",
        "For each element nums[i], update prefixSum += nums[i].",
        "If (prefixSum - goal) exists in prefixCount, add prefixCount[prefixSum - goal] to count.",
        "Increment prefixCount[prefixSum].",
        "Return count."
      ]
    }
  },
  "code": {
    "cpp": "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numSubarraysWithSum(vector<int>& nums, int goal) {\n        unordered_map<int, int> prefixCount;\n        prefixCount[0] = 1; // base case\n        int prefixSum = 0, result = 0;\n        \n        for (int num : nums) {\n            prefixSum += num;\n            if (prefixCount.find(prefixSum - goal) != prefixCount.end()) {\n                result += prefixCount[prefixSum - goal];\n            }\n            prefixCount[prefixSum]++;\n        }\n        return result;\n    }\n};\n\nint main() {\n    Solution sol;\n    vector<int> nums1 = {1, 1, 0, 1, 0, 0, 1};\n    cout << \"Number of subarrays with sum 3: \" << sol.numSubarraysWithSum(nums1, 3) << endl; // 4\n    \n    vector<int> nums2 = {0, 0, 0, 0, 1};\n    cout << \"Number of subarrays with sum 0: \" << sol.numSubarraysWithSum(nums2, 0) << endl; // 10\n    return 0;\n}"
  }
}
