{
  "problemId": "p12",
  "title": "Subarray with K Different Integers",
  "description": "Given an integer array nums and an integer k, return the number of good subarrays with exactly k distinct integers.",
  "aim": "Use the at-most trick: count(atMost(k)) - count(atMost(k-1)). Each count is computed via sliding window with a frequency map and distinct counter.",
  "moduleId": "slidingWindow",
  "submoduleId": "sw_advanced",
  "difficulty": "Hard",
  "tags": [
    "Array",
    "Sliding Window",
    "Hash Map",
    "Counting"
  ],
  "examples": [
    {
      "input": "nums=[1,2,1,2,3], k=2",
      "output": "7"
    }
  ],
  "playground": {
    "initialState": {
      "array": [1, 2, 1, 2, 3],
      "k": 2,
      "windowStart": null,
      "windowEnd": null,
      "freqMapStr": "{}",
      "distinct": 0,
      "currentSum": 0,
      "result": [],
      "currCount": 0,
      "highlightedElements": [],
      "stepAction": "initialize"
    },
    "steps": [
      {
        "stepId": 0,
        "description": "Initialize pointers and frequency map for atMost(K).",
        "expectedAction": "click_initialize",
        "jarvisMessage": "Set left=0, right=0, freqMap={}, distinct=0, currentSum=0 for atMost(K).",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "not_yet_reached", "index": 0 },
            { "value": 2, "state": "not_yet_reached", "index": 1 },
            { "value": 1, "state": "not_yet_reached", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": null,
          "windowEnd": null,
          "freqMapStr": "{}",
          "distinct": 0,
          "currentSum": 0,
          "highlightedElements": []
        }
      },
      {
        "stepId": 1,
        "description": "Expand: include nums[0]=1, window=[0..0], freqMap={1:1}, distinct=1, currentSum=1.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 0,
        "jarvisMessage": "Include 1 in the window. Subarrays ending here: [1].",
        "codeSnippet": "freqMap[1]=(freqMap[1]||0)+1; if(freqMap[1]==1) distinct++; ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "in_window", "index": 0 },
            { "value": 2, "state": "not_yet_reached", "index": 1 },
            { "value": 1, "state": "not_yet_reached", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": 0,
          "windowEnd": 0,
          "freqMapStr": "{1:1}",
          "distinct": 1,
          "currentSum": 1,
          "highlightedElements": [0]
        }
      },
      {
        "stepId": 2,
        "description": "Expand: include nums[1]=2, window=[0..1], freqMap={1:1,2:1}, distinct=2, currentSum=3.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 1,
        "jarvisMessage": "Include 2. Subarrays ending here: [1,2],[2].",
        "codeSnippet": "freqMap[2]=(freqMap[2]||0)+1; if(freqMap[2]==1) distinct++; ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "in_window", "index": 0 },
            { "value": 2, "state": "in_window", "index": 1 },
            { "value": 1, "state": "not_yet_reached", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": 0,
          "windowEnd": 1,
          "freqMapStr": "{1:1,2:1}",
          "distinct": 2,
          "currentSum": 3,
          "highlightedElements": [0, 1]
        }
      },
      {
        "stepId": 3,
        "description": "Expand: include nums[2]=1 (duplicate), window=[0..2], freqMap={1:2,2:1}, distinct=2, currentSum=6.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 2,
        "jarvisMessage": "Include duplicate 1. Subarrays ending here: [1,2,1],[2,1],[1].",
        "codeSnippet": "freqMap[1]++; ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "in_window", "index": 0 },
            { "value": 2, "state": "in_window", "index": 1 },
            { "value": 1, "state": "in_window", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": 0,
          "windowEnd": 2,
          "freqMapStr": "{1:2,2:1}",
          "distinct": 2,
          "currentSum": 6,
          "highlightedElements": [0, 1, 2]
        }
      },
      {
        "stepId": 4,
        "description": "Expand: include nums[3]=2 (duplicate), window=[0..3], freqMap={1:2,2:2}, distinct=2, currentSum=10.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 3,
        "jarvisMessage": "Include duplicate 2. Subarrays ending here: [1,2,1,2],[2,1,2],[1,2],[2].",
        "codeSnippet": "freqMap[2]++; ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "in_window", "index": 0 },
            { "value": 2, "state": "in_window", "index": 1 },
            { "value": 1, "state": "in_window", "index": 2 },
            { "value": 2, "state": "in_window", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": 0,
          "windowEnd": 3,
          "freqMapStr": "{1:2,2:2}",
          "distinct": 2,
          "currentSum": 10,
          "highlightedElements": [0, 1, 2, 3]
        }
      },
      {
        "stepId": 5,
        "description": "Expand: include nums[4]=3 (new distinct), distinct=3>K. Shrink window from left until distinct≤K. WindowStart moves to 2.",
        "expectedAction": "shrink_window",
        "expectedElementIndex": 4,
        "jarvisMessage": "Shrink window: remove 1 at index0, remove 2 at index1. WindowStart=2. freqMap={1:1,2:1,3:1}, distinct=2.",
        "codeSnippet": "freqMap[nums[left]]--; if(freqMap[nums[left]]==0) distinct--; left++;",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "not_in_window", "index": 0 },
            { "value": 2, "state": "not_in_window", "index": 1 },
            { "value": 1, "state": "in_window", "index": 2 },
            { "value": 2, "state": "in_window", "index": 3 },
            { "value": 3, "state": "in_window", "index": 4 }
          ],
          "windowStart": 2,
          "windowEnd": 4,
          "freqMapStr": "{1:1,2:1,3:1}",
          "distinct": 2,
          "currentSum": 10,
          "highlightedElements": [2, 3, 4]
        }
      },
      {
        "stepId": 6,
        "description": "Count valid subarrays after shrinking. Window=[2..4], add window size=3 to currentSum=13.",
        "expectedAction": "update_count",
        "jarvisMessage": "Subarrays ending at 4: [1,2,3],[2,3],[3].",
        "codeSnippet": "ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "not_in_window", "index": 0 },
            { "value": 2, "state": "not_in_window", "index": 1 },
            { "value": 1, "state": "in_window", "index": 2 },
            { "value": 2, "state": "in_window", "index": 3 },
            { "value": 3, "state": "in_window", "index": 4 }
          ],
          "windowStart": 2,
          "windowEnd": 4,
          "freqMapStr": "{1:1,2:1,3:1}",
          "distinct": 2,
          "currentSum": 13,
          "highlightedElements": [2, 3, 4]
        }
      },
      {
        "stepId": 7,
        "description": "Re-initialize pointers and freqMap for atMost(K-1).",
        "expectedAction": "reinitialize_k_minus_1",
        "jarvisMessage": "Now reset for the K-1 pass: set left=0, right=0, freqMap={}, distinct=0, currentSum=0. We'll recompute atMost(K-1).",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "not_yet_reached", "index": 0 },
            { "value": 2, "state": "not_yet_reached", "index": 1 },
            { "value": 1, "state": "not_yet_reached", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": null,
          "windowEnd": null,
          "freqMapStr": "{}",
          "distinct": 0,
          "currentSum": 0,
          "highlightedElements": []
        }
      },
      {
        "stepId": 8,
        "description": "Expand: include nums[0]=1, window=[0..0], freqMap={1:1}, distinct=1, currentSum=1.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 0,
        "jarvisMessage": "Subarrays ending at 0: [1].",
        "codeSnippet": "freqMap[1]=(freqMap[1]||0)+1; if(freqMap[1]==1) distinct++; ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "in_window", "index": 0 },
            { "value": 2, "state": "not_yet_reached", "index": 1 },
            { "value": 1, "state": "not_yet_reached", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": 0,
          "windowEnd": 0,
          "freqMapStr": "{1:1}",
          "distinct": 1,
          "currentSum": 1,
          "highlightedElements": [0]
        }
      },
      {
        "stepId": 9,
        "description": "Expand: include nums[1]=2, distinct=2>K-1. Shrink from left until distinct≤K-1. WindowStart moves to 1. currentSum=1.",
        "expectedAction": "shrink_window",
        "expectedElementIndex": 1,
        "jarvisMessage": "Remove 1 at index0. WindowStart=1, freqMap={2:1}, distinct=1.",
        "codeSnippet": "freqMap[nums[left]]--; if(freqMap[nums[left]]==0) distinct--; left++; ans += (right-left+1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "not_in_window", "index": 0 },
            { "value": 2, "state": "in_window", "index": 1 },
            { "value": 1, "state": "not_in_window", "index": 2 },
            { "value": 2, "state": "not_yet_reached", "index": 3 },
            { "value": 3, "state": "not_yet_reached", "index": 4 }
          ],
          "windowStart": 1,
          "windowEnd": 1,
          "freqMapStr": "{2:1}",
          "distinct": 1,
          "currentSum": 1,
          "highlightedElements": [1]
        }
      },
      {
        "stepId": 10,
        "description": "Complete algorithm: exactly K = atMost(K)-atMost(K-1) = 13-6=7.",
        "expectedAction": "complete_algorithm",
        "jarvisMessage": "Final result exactlyK = 7.",
        "codeSnippet": "return atMost(K)-atMost(K-1);",
        "uiState": {
          "arrayElements": [
            { "value": 1, "state": "not_in_window", "index": 0 },
            { "value": 2, "state": "not_in_window", "index": 1 },
            { "value": 1, "state": "in_window", "index": 2 },
            { "value": 2, "state": "in_window", "index": 3 },
            { "value": 3, "state": "in_window", "index": 4 }
          ],
          "windowStart": 2,
          "windowEnd": 4,
          "currentSum": 7,
          "highlightedElements": [2, 3, 4]
        }
      }
    ]
  },
  "solution": {
    "optimal": {
      "idea": "Use the at-most trick: count subarrays with at most K distinct integers, then subtract count(atMost(K-1)) to get exactly K. Maintain sliding window, frequency map, and distinct counter.",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(k)",
      "walkthrough": [
        "Compute atMost(K) and atMost(K-1) using sliding window.",
        "Track frequency map, window pointers, distinct counter, and subarrays ending at each right.",
        "Shrink window whenever distinct > K (or K-1).",
        "Add window length to totalCount at each valid step.",
        "Subtract atMost(K-1) from atMost(K) to get exactly K.",
        "Return totalCount as the answer."
      ]
    }
  },
  "complexityAnalysis": {
    "title": "COMPLEXITY ANALYSIS",
    "overview": "Two linear passes through array: atMost(K) and atMost(K-1). Each element processed at most twice.",
    "timeComplexity": {
      "value": "O(n)",
      "explanation": "Right and left pointers visit each element at most once per pass. Two passes → O(n)."
    },
    "spaceComplexity": {
      "value": "O(k)",
      "explanation": "Frequency map holds at most K distinct elements."
    }
  }
}