{
  "problemId": "p12",
  "title": "Subarray with K Different Integers",
  "description": "Given an array of positive integers and an integer K, find the number of subarrays that contain exactly K different integers.",
  "aim": "Master the 'at most K' - 'at most K-1' = 'exactly K' technique, which is fundamental for many counting problems.",
  "moduleId": "slidingWindow",
  "submoduleId": "sw_advanced",
  "difficulty": "Hard",
  "tags": ["sliding-window", "hashmap", "counting", "at-most-trick", "advanced"],
  "examples": [
    {
      "input": "nums = [1,2,1,2,3], k = 2",
      "output": "7",
      "explanation": "Subarrays with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2]"
    },
    {
      "input": "nums = [1,2,1,3,4], k = 3",
      "output": "3",
      "explanation": "Subarrays with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4]"
    }
  ],
  "playground": {
    "initialState": {
      "array": [1, 2, 1, 2, 3],
      "k": 2,
      "windowStart": 0,
      "windowEnd": 0,
      "distinctCount": 0,
      "atMostK": 0,
      "atMostKMinus1": 0
    },
    "visualization": {
      "type": "counting_windows",
      "showDistinctCount": true,
      "showAtMostComparison": true,
      "showFrequencyMap": true
    }
  },
  "solution": {
    "approach": "Use 'at most K' - 'at most K-1' = 'exactly K' technique with two sliding windows",
    "timeComplexity": "O(n)",
    "spaceComplexity": "O(k)",
    "keyInsight": "Counting exactly K = counting at most K minus counting at most K-1"
  },
  "code": {
    "template": "int subarraysWithKDistinct(vector<int>& nums, int k) {\n    // Your code here\n}",
    "solution": "int subarraysWithKDistinct(vector<int>& nums, int k) {\n    return atMostK(nums, k) - atMostK(nums, k - 1);\n}\n\nint atMostK(vector<int>& nums, int k) {\n    if (k == 0) return 0;\n    \n    unordered_map<int, int> count;\n    int left = 0, result = 0;\n    \n    for (int right = 0; right < nums.size(); right++) {\n        if (count[nums[right]]++ == 0) k--;\n        \n        while (k < 0) {\n            if (--count[nums[left]] == 0) k++;\n            left++;\n        }\n        \n        result += right - left + 1;\n    }\n    \n    return result;\n}"
  }
}
