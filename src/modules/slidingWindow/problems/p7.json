{
  "problemId": "p7",
  "title": "Fruit Into Baskets",
  "description": "You are visiting a farm to collect fruits. The farm has a single row of fruit trees. You will be given two baskets, and your goal is to pick as many fruits as possible to be placed in the given baskets. Each basket can have only one type of fruit. You can start with any tree, but you can't skip a tree once you have started. You will stop when you have to pick from a third fruit type.",
  "aim": "Demonstrate variable-size sliding window with a hashmap to track fruit frequencies; expand when distinct fruit types ≤ 2 and contract when distinct fruit types > 2.",
  "moduleId": "slidingWindow",
  "submoduleId": "sw_variable",
  "difficulty": "Medium",
  "tags": ["String", "Sliding Window", "Variable Size", "HashMap", "Character Frequency", "Fruit Baskets"],
  "examples": [
    { "input": "arr = ['A', 'B', 'C', 'A', 'C']", "output": "3", "explanation": "We can put 2 'C' in one basket and one 'A' in the other from the subarray ['C', 'A', 'C']." },
    { "input": "arr = ['A', 'B', 'C', 'B', 'B', 'C']", "output": "5", "explanation": "We can put 3 'B' in one basket and two 'C' in the other basket. This can be done if we start with the second letter: ['B', 'C', 'B', 'B', 'C']." }
  ],
  "playground": {
    "initialState": {
      "array": ["A", "B", "C", "A", "C"],
      "k": 2,
      "windowStart": 0,
      "windowEnd": 0,
      "maxLength": 0,
      "currentLength": 0,
      "charCount": {},
      "distinctChars": 0,
      "bestWindow": null
    },
    "steps": [
      {
        "stepId": 1,
        "description": "Initialize variables. We'll use a hashmap (fruitFrequencyMap) to track fruit frequencies and count distinct fruit types.",
        "expectedAction": "click_initialize",
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "not_yet_reached", "index": 0},
            {"value": "B", "state": "not_yet_reached", "index": 1},
            {"value": "C", "state": "not_yet_reached", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "C", "state": "not_yet_reached", "index": 4}
          ],
          "windowStart": null,
          "windowEnd": null,
          "maxLength": 0,
          "currentLength": 0,
          "charCount": {},
          "distinctChars": 0,
          "bestWindow": null,
          "highlightedElements": [],
          "k": 2
        },
        "jarvisMessage": "Welcome to the fruit farm! We'll use a hashmap to track fruit frequencies and count distinct fruit types. Our goal is to find the longest subarray with at most k=2 distinct fruit types.",
        "codeHint": "// Initialize\nlet windowStart = 0;\nlet maxLength = 0;\nlet fruitFrequencyMap = {};\nlet distinctFruits = 0;",
        "codeBotMessage": "HashMap will track how many fruits of each type are in our current window. We'll expand when distinct fruit types ≤ 2 and contract when distinct fruit types > 2.",
        "codeSnippet": "let windowStart = 0;\nlet maxLength = 0;\nconst fruitFrequencyMap = Object.create(null);\nlet distinctFruits = 0;"
      },
      {
        "stepId": 2,
        "description": "Expand: add 'A'. fruitFrequencyMap = {A: 1}, distinctFruits = 1 ≤ k=2. maxLength = 1.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 0,
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "in_window", "index": 0},
            {"value": "B", "state": "not_yet_reached", "index": 1},
            {"value": "C", "state": "not_yet_reached", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "C", "state": "not_yet_reached", "index": 4}
          ],
          "windowStart": 0,
          "windowEnd": 0,
          "maxLength": 1,
          "currentLength": 1,
          "charCount": {"A": 1},
          "distinctChars": 1,
          "bestWindow": [0, 0],
          "highlightedElements": [0],
          "k": 2
        },
        "jarvisMessage": "Added fruit 'A'. We now have 1 distinct fruit type, which is ≤ k=2. Update maxLength to 1.",
        "codeHint": "// Expand\nfruitFrequencyMap[arr[windowEnd]] = (fruitFrequencyMap[arr[windowEnd]] || 0) + 1;\nif (fruitFrequencyMap[arr[windowEnd]] === 1) distinctFruits++;\nmaxLength = Math.max(maxLength, windowEnd - windowStart + 1);",
        "codeBotMessage": "Valid window so far. We can expand more since distinctFruits (1) ≤ k (2).",
        "codeSnippet": "fruitFrequencyMap['A'] = 1; distinctFruits = 1; maxLength = 1;"
      },
      {
        "stepId": 3,
        "description": "Expand: add 'B'. fruitFrequencyMap = {A: 1, B: 1}, distinctFruits = 2 ≤ k=2. maxLength = 2.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 1,
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "in_window", "index": 0},
            {"value": "B", "state": "in_window", "index": 1},
            {"value": "C", "state": "not_yet_reached", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "C", "state": "not_yet_reached", "index": 4}
          ],
          "windowStart": 0,
          "windowEnd": 1,
          "maxLength": 2,
          "currentLength": 2,
          "charCount": {"A": 1, "B": 1},
          "distinctChars": 2,
          "bestWindow": [0, 1],
          "highlightedElements": [0, 1],
          "k": 2
        },
        "jarvisMessage": "Added fruit 'B'. Now we have 2 distinct fruit types (A, B), which equals k=2. We can still expand!",
        "codeHint": "// Expand and update best",
        "codeBotMessage": "Window \"AB\" has 2 distinct fruit types, which equals k. We can expand more.",
        "codeSnippet": "fruitFrequencyMap['B'] = 1; distinctFruits = 2; maxLength = 2;"
      },
      {
        "stepId": 4,
        "description": "Expand: add 'C'. fruitFrequencyMap = {A: 1, B: 1, C: 1}, distinctFruits = 3 > k=2. Contract from left until distinctFruits ≤ k.",
        "expectedAction": "contract_window",
        "expectedElementIndex": 2,
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "B", "state": "in_window", "index": 1},
            {"value": "C", "state": "in_window", "index": 2},
            {"value": "A", "state": "not_yet_reached", "index": 3},
            {"value": "C", "state": "not_yet_reached", "index": 4}
          ],
          "windowStart": 1,
          "windowEnd": 2,
          "maxLength": 2,
          "currentLength": 2,
          "charCount": {"B": 1, "C": 1},
          "distinctChars": 2,
          "bestWindow": [0, 1],
          "highlightedElements": [1, 2],
          "k": 2
        },
        "jarvisMessage": "Added fruit 'C' but now we have 3 distinct fruit types (A, B, C), which exceeds k=2. We must contract from the left until we're back to ≤2 distinct fruit types.",
        "codeHint": "// While too many distinct fruit types\nwhile (distinctFruits > k) {\n  fruitFrequencyMap[arr[windowStart]]--;\n  if (fruitFrequencyMap[arr[windowStart]] === 0) distinctFruits--;\n  windowStart++;\n}",
        "codeBotMessage": "We removed fruit 'A' from the left until distinctFruits ≤ k. Now window is \"BC\" with 2 distinct fruit types.",
        "codeSnippet": "// Now window is \"BC\" at indices [1,2], distinctFruits = 2 ≤ k = 2"
      },
      {
        "stepId": 5,
        "description": "Expand: add 'A' → window \"BCA\" (len 3).",
        "expectedAction": "expand_window",
        "expectedElementIndex": 3,
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "B", "state": "in_window", "index": 1},
            {"value": "C", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "C", "state": "not_yet_reached", "index": 4}
          ],
          "windowStart": 1,
          "windowEnd": 3,
          "maxLength": 3,
          "currentLength": 3,
          "charCount": {"B": 1, "C": 1, "A": 1},
          "distinctChars": 3,
          "bestWindow": [1, 3],
          "highlightedElements": [1, 2, 3],
          "k": 2
        },
        "jarvisMessage": "Added fruit 'A' but now we have 3 distinct fruit types (B, C, A), which exceeds k=2. We must contract from the left until we're back to ≤2 distinct fruit types.",
        "codeHint": "// While too many distinct fruit types\nwhile (distinctFruits > k) {\n  fruitFrequencyMap[arr[windowStart]]--;\n  if (fruitFrequencyMap[arr[windowStart]] === 0) distinctFruits--;\n  windowStart++;\n}",
        "codeBotMessage": "We removed fruit 'B' from the left until distinctFruits ≤ k. Now window is \"CA\" with 2 distinct fruit types.",
        "codeSnippet": "// Now window is \"CA\" at indices [2,3], distinctFruits = 2 ≤ k = 2"
      },
      {
        "stepId": 6,
        "description": "Expand: add 'C' → window \"CAC\" (len 3). maxLength = 3.",
        "expectedAction": "expand_window",
        "expectedElementIndex": 4,
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "B", "state": "out_of_window_past", "index": 1},
            {"value": "C", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "C", "state": "in_window", "index": 4}
          ],
          "windowStart": 2,
          "windowEnd": 4,
          "maxLength": 3,
          "currentLength": 3,
          "charCount": {"C": 2, "A": 1},
          "distinctChars": 2,
          "bestWindow": [2, 4],
          "highlightedElements": [2, 3, 4],
          "k": 2
        },
        "jarvisMessage": "Added fruit 'C'. Still 2 distinct fruit types (C, A), so we can expand more. Window \"CAC\" has length 3.",
        "codeHint": "// Expand and update best",
        "codeBotMessage": "Best length now 3. We can continue expanding since distinctFruits (2) ≤ k (2).",
        "codeSnippet": "fruitFrequencyMap['C'] = 2; maxLength = 3;"
      },
      {
        "stepId": 7,
        "description": "Algorithm completed! Best subarray length = 3 (e.g., \"CAC\").",
        "expectedAction": "complete_algorithm",
        "expectedElementIndex": 4,
        "uiState": {
          "arrayElements": [
            {"value": "A", "state": "out_of_window_past", "index": 0},
            {"value": "B", "state": "out_of_window_past", "index": 1},
            {"value": "C", "state": "in_window", "index": 2},
            {"value": "A", "state": "in_window", "index": 3},
            {"value": "C", "state": "in_window", "index": 4}
          ],
          "windowStart": 2,
          "windowEnd": 4,
          "maxLength": 3,
          "currentLength": 3,
          "charCount": {"C": 2, "A": 1},
          "distinctChars": 2,
          "bestWindow": [2, 4],
          "highlightedElements": [2, 3, 4],
          "k": 2
        },
        "jarvisMessage": "🎉 Congratulations! You've completed the fruit collection walkthrough. Best subarray length is 3 (e.g., \"CAC\").",
        "codeHint": "// Done\nreturn maxLength;",
        "codeBotMessage": "HashMap + expand/contract: O(n) time, O(k) space. We tracked fruit frequencies and maintained ≤k distinct fruit types.",
        "codeSnippet": "// Final answer\nreturn maxLength;"
      }
    ],
    "jarvisConfig": {
      "personality": "encouraging",
      "hintLevels": ["subtle", "helpful", "explicit"],
      "motivationalMessages": [
        "Great thinking! Expand until distinct fruit types > k, then contract to restore validity.",
        "Exactly! The hashmap ensures we track fruit frequencies efficiently.",
        "You're mastering variable-size windows with fruit type constraints!",
        "Awesome! This technique generalizes to many fruit collection problems."
      ]
    }
  },
  "solution": {
    "optimal": {
      "idea": "Use variable-size window with a hashmap to track fruit frequencies and count distinct fruit types. Expand when distinct fruit types ≤ k and contract when distinct fruit types > k.",
      "timeComplexity": "O(n)",
      "spaceComplexity": "O(k)",
      "walkthrough": [
        "Initialize windowStart = 0, maxLength = 0, fruitFrequencyMap = {}, distinctFruits = 0.",
        "For windowEnd from 0..n-1, add arr[windowEnd] to fruitFrequencyMap and update distinctFruits.",
        "While distinctFruits > k, decrement fruitFrequencyMap[arr[windowStart]] and increment windowStart.",
        "Update maxLength with current window size.",
        "Return maxLength."
      ]
    }
  },
  "code": {
    "cpp": "#include <iostream>\n#include <unordered_map>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int findLength(const vector<char> &arr) {\n        int windowStart = 0, maxLength = 0;\n        unordered_map<char, int> fruitFrequencyMap;\n        \n        for (int windowEnd = 0; windowEnd < arr.size(); ++windowEnd) {\n            fruitFrequencyMap[arr[windowEnd]]++;\n            \n            while (fruitFrequencyMap.size() > 2) {\n                fruitFrequencyMap[arr[windowStart]]--;\n                if (fruitFrequencyMap[arr[windowStart]] == 0) {\n                    fruitFrequencyMap.erase(arr[windowStart]);\n                }\n                windowStart++;\n            }\n            \n            maxLength = max(maxLength, windowEnd - windowStart + 1);\n        }\n        return maxLength;\n    }\n};\n\nint main() {\n    Solution sol;\n    cout << \"Maximum number of fruits: \" \n         << sol.findLength(vector<char>{'A', 'B', 'C', 'A', 'C'}) << endl; // 3\n    cout << \"Maximum number of fruits: \" \n         << sol.findLength(vector<char>{'A', 'B', 'C', 'B', 'B', 'C'}) << endl; // 5\n    return 0;\n}"
  }
}
